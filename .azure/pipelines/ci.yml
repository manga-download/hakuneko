pr: none
trigger:
  batch: true
  branches:
    include:
    - master

jobs:
- job: 'CI'
  strategy:
    matrix: {
      Windows: { agent: windows-latest },
      Ubuntu: { agent: ubuntu-latest },
      macOS: { agent: macOS-latest },
    }
  pool:
    vmImage: $(agent)
  variables:
    display: ':99' # This will also set the environment variable 'DISPLAY=:99' required for apps to connect to the X-Server
  steps:

  # Running electron on Ubuntu requires an X-server:
  # https://github.com/Microsoft/azure-pipelines-image-generation/issues/239
  # It is also possible to use X-Server for just a single command:
  # https://manpages.ubuntu.com/manpages/trusty/man1/xvfb-run.1.html
  # This snippet was partially stolen from VSCode to support running electron on Ubuntu
  - script: |
      #sudo apt-get update
      #sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgconf-2-4
      sudo /usr/bin/Xvfb -ac $(display) -screen 0 1920x1080x24 > /dev/null 2>&1 &
      disown -ar # remove all running jobs (e.g. xvfb) from the job table of this bash process
    condition: startsWith(variables['agent'], 'ubuntu')
    displayName: 'Starting X Virtual Frame Buffer (Port 99)'

  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install NodeJS'

  - task: Npm@1
    inputs:
      command: install
    displayName: 'Install NPM Packages'

  - script: npm run lint
    displayName: 'Lint'

  - script: npm run build:web
    displayName: 'Build (web)'

  - script: npm run test
    continueOnError: true
    displayName: 'Test'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      mergeTestResults: true
      testRunTitle: 'TestResults_$(Agent.OS)'
      buildConfiguration: $(Agent.OS)
      buildPlatform: $(Agent.OSArchitecture)
    displayName: 'Publish Test Results'