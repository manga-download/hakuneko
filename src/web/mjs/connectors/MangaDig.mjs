/* eslint-disable */
import ZYMK from './templates/ZYMK.mjs';
class MangaDig extends ZYMK {

    constructor() {
        super();
        super.id = 'mangadig';
        super.label = 'MangaDig';
        this.tags = [ 'webtoon', 'english', 'manga' ];
        this.url = 'https://mangadig.com';
        this.path = '/show?page=';
        this.pathSuffix = '';
        this.queryMangas = 'ul.fed-list-info li.fed-list-item a.fed-list-title';
        this.queryMangasPageCount = 'div.fed-page-info a.fed-show-sm-inline';
        this.queryChapters = 'div.all_data_list ul li a';
        this.queryMangaTitle = 'dl.fed-deta-info dd.fed-deta-content h1.fed-part-eone';
    }

    async _getPages(chapter) {
        const script = (() => { return require('electron').remote.BrowserWindow.getFocusedWindow().isDevToolsOpened() && require('electron').remote.BrowserWindow.getFocusedWindow().closeDevTools(), atob('KGZ1bmN0aW9uKF8weDUyNzU3YixfMHgyMWIzMjQpe2NvbnN0IF8weDNkOTEzZT1fMHg1YThhLF8weDM2OGQzMz1fMHg1Mjc1N2IoKTt3aGlsZSghIVtdKXt0cnl7Y29uc3QgXzB4M2Q2MzRkPXBhcnNlSW50KF8weDNkOTEzZSgweDEwYywnQVYpXicpKS8oLTB4MioweDk1YSsweGY2NSsweDM1MCkrcGFyc2VJbnQoXzB4M2Q5MTNlKDB4MTFmLCc1YypIJykpLygweDcwMCoweDUrLTB4YjY1Ky0weDE3OTkpKihwYXJzZUludChfMHgzZDkxM2UoMHgxNTEsJzVjKkgnKSkvKDB4YjRhKzB4MTJiKy0weDIxMyoweDYpKSstcGFyc2VJbnQoXzB4M2Q5MTNlKDB4MTQzLCdkZSNHJykpLygweDFjZTEqLTB4MSstMHg1ZistMHg0Ki0weDc1MSkqKC1wYXJzZUludChfMHgzZDkxM2UoMHgxMGUsJ0ZkVWcnKSkvKDB4NjUyKzB4MyotMHg3ZisweDcwKi0weGIpKSstcGFyc2VJbnQoXzB4M2Q5MTNlKDB4ZmUsJ05yeFknKSkvKDB4MSoweDFhZWUrLTB4M2QwKy0weDE3MTgpK3BhcnNlSW50KF8weDNkOTEzZSgweGZmLCdKc3d5JykpLygweDEqLTB4MjFlKy0weDE5OTcqLTB4MSstMHgyKjB4YmI5KSooLXBhcnNlSW50KF8weDNkOTEzZSgweGZiLCdKc3d5JykpLygtMHgxODk5Ky0weGEqLTB4MmYwKzB4MTk1Ki0weDMpKSstcGFyc2VJbnQoXzB4M2Q5MTNlKDB4MTMxLCdwMjA5JykpLygtMHgxZjcxKy0weDNjYiotMHgyKzB4MTdlNCkrcGFyc2VJbnQoXzB4M2Q5MTNlKDB4MTE1LCdtSiV5JykpLygweDJlNSstMHhhYioweDMrLTB4ZGEpO2lmKF8weDNkNjM0ZD09PV8weDIxYjMyNClicmVhaztlbHNlIF8weDM2OGQzM1sncHVzaCddKF8weDM2OGQzM1snc2hpZnQnXSgpKTt9Y2F0Y2goXzB4MTgzMjJlKXtfMHgzNjhkMzNbJ3B1c2gnXShfMHgzNjhkMzNbJ3NoaWZ0J10oKSk7fX19KF8weDVhZWIsLTB4MjlkNyotMHg1ZisweDE2YzA3Ky0weDZhNmFkKSk7ZnVuY3Rpb24gXzB4NWFlYigpe2NvbnN0IF8weDU1ZmRkMj1bJ3NXOFdXNVZkT0NrcmY4bzBtYScsJ1c3cGNITm1SVzUwJywnV1FaZFJJckJGYScsJ1dRTmRWTnVzYXEnLCdXNWxkSUc0VmZTb2x4U29EVzZLcGxDa2wnLCdXTzNkUDNEekZxJywnV08zZFVTa3ZXN0pkSVNvM0Ftb2dqQ296YThrdm84b0hXNmUnLCdXN0pjTEh5U21xJywnejhvTVc2ajJyOG85V1BUVycsJ2x4UmRKU29KV1JqSycsJ2g4a2NpdWlHJywnVzVOY0czSzBXNU8nLCdubW9vVzQzY0pHeGNVRycsJ2YyWmRNQ29QV1I0JywnVzVSZFZNMGtwcScsJ1c3eGNPTjBiVzdsZEd4OERXUjQ2VzR6YVdPcVFEdHhkSXEnLCdGU2src0xTZHZjTmNPOGt1V1A4RycsJ0RmckVlMk8nLCdXUjdkR1NrVFdQaGNKQ29aVzV4Y1ZxdlJXN0JkUzhvVnphJywnV1FtT1c2MHRkbW9PZFd0Y1RkdUlXUlcnLCdqMnJYVzZaZFJXJywnVzQ3Y1VZcGNKU2tTJywnV080Vlc0UzNXUTAnLCdXN2xjU1l1NGhKYScsJ1c0RmRHQ2t1anhEbldQRmNISVMnLCdFQ2tpVzVwY0pta1knLCdtcjNjTUwvY0hta2VDbW9Ca2VxZicsJ2JidTlzdFZkVXgzZExjZkZXN0dsJywnVzdkY1VaMCcsJ1dSN2NNMERZV1JTJywnZ21rZ2Vta0lXUGVJVzVMTldPL2NKMlJkSW1rUmhhJywnbTBCY1Zta2ZXNnBkR2EnLCdXUHhjUHNDWFc3cScsJ1dSbGRLQ2tpZXZ1JywnaXhLYVdRVmRWcScsJ294UmRNOG9iV1JIVlc1T3NFYScsJ1dRbGRWTksxVzczZE94dXknLCdXNFJjSlk4Z2FXJywnV1B4Y05nTFJ2OGtzRjhvRicsJ1dPaGNTWkdNVzZpJywnd21rbFc3dGNNU2tqJywnVzVTSXFtb0NXNnUnLCdpU29uVzdOZE1XJywnYlNrVmQ4a0JXUGEnLCdXNlgvclNveicsJ2hTa3RmbWtuV09DJywnV1FGY09KV0MnLCdwY0x4V1A1TicsJ1dSdGNKcTRYVzdXJywnVzROY1JjQzZocScsJ3NHOFhXUkpkUVNrYW5Tb3RnTjAnLCdod3JGRjhraicsJ29Db0RXN20nLCdXNFpjT0NvQldRdGNKU2taZFNrb3lta3hzQ29KJywnd0NrUWZHR1RXN0NpV09XJywnd1Nrclc0TmNWOGtMJywnVzdSY1VLODFhcUZjSmc0Jywnc1NrR210OFdXN2VuV09pdFc3WG56WmI3JywnRW1rQXJ2R3InLCdXUmxjU2RHM1c1UycsJ1c1ZGNHMXFsVzd5JywnRWJkZFFTb2dXUnhkSGRWY1BTa0F0Q29lJywnb1NrSFc2dnR0bW85V1IxR244b1FGeEdBQXFpJywnbWdMRnRta1huR05jVGEnLCdXN0JjUEdSY1VDay8nLCdydmIwYWh4Y09XJywnRkNra1c0N2NLOGt6JywnY3ZkY1E4a3BXNjgnLCdXUnVWVzZ5eldRZScsJ1dQbGRKOGtzVzdsZFZXJywnRFNrQlc2ZGNPYnhjUEs3ZE1XJywnaXJGY0x2N2NLOGtFJywnVzVwZElHNE9lOG9sajhraVc0Q1dibWt4V09sZE1HJywnQ1p1K2RDbzFBTC9jUUNrR2FDb2dvZTQnLCdEQ2t6V1AvZEtMTmRSWGRkUVNrM2gzalR0cScsJ2hDa2Vjd2kzJywneDNYM3B1RycsJ1c1VmNJd1NmVzVHJywndEdXV1dSVmNJU28wc1Nrc2swRmRLQ2tmd21rUCcsJ25nRFJ4Q2tRb1cnLCdqU294VzVOZEhaVmNLd2ExJywnV1JubFc1aGRJMEMnLCdXNm1mQzhvdVc0VycsJ29MaGRKU29OV1JTJywnV1B0ZE5keGRNWlMnLCdXNFpkTHY4Qm5hJywnaThva1c1N2NSVzNjUUtOZE5Da1NwZTFQJywnVzZUTFdSTHBXNVcyV1BlS1dSYUdXUUtWJywnV1F0Y1NJNGdXN3hjR3EnLCdBU2tsV1IzY0dOWmNMZzBDVzdSY0xNaScsJ1c0WmNLSDhmYmY0JywnVzV0Y1ZZN2NTU2tUJywnV09PeVc0R3FuYScsJ1dRcGNVYldhVzZ0Y0doYXAnLCdqQ2szV1FaZFZIcXpkbWtPdG1rRHZkTmNLYScsJ3VOaVpXUDVvVzY0QWZnNCcsJ1c0eGRLcXU5VzZsY09iZGNRWFJkVnJGZEdta3BXNTgnLCdXUGRjSnV2QVdSM2RTM3BkUXNlJywnaENrQ1dQSmRJZVMnLCdXNmRkUzFlTWhTa2snLCdXUVpkVThrRGNNQycsJ1dReGRSWHZReUtxOVdPZGRPbWszVzQzY0tTbzlXUTRGVzRhMicsJ2hta1pXNHhjUWRGY1JyZlJ3Q29OJywnVzZHa0FTb1VXNU8nLCdCbWttZVl1QycsJ1c2QmRPeFBuV1FwZE1jeXBwTXVLV1JmSSddO18weDVhZWI9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4NTVmZGQyO307cmV0dXJuIF8weDVhZWIoKTt9Y29uc3QgXzB4NGIzODA2PShmdW5jdGlvbigpe2NvbnN0IF8weDI0ODMwZD1fMHg1YThhLF8weDQ3MGM1Mz17J1hpS3R6JzpfMHgyNDgzMGQoMHgxM2EsJ3YwcFEnKSwnVnNGSEInOmZ1bmN0aW9uKF8weDFiZjhmMyxfMHg0MjdhOTEpe3JldHVybiBfMHgxYmY4ZjMrXzB4NDI3YTkxO30sJ3ZFZmtGJzpmdW5jdGlvbihfMHg1OTc0NWUsXzB4MTNkZjE5KXtyZXR1cm4gXzB4NTk3NDVlKF8weDEzZGYxOSk7fSwnaXNmWWInOmZ1bmN0aW9uKF8weDExOGRiYSxfMHgzZTNlYzMpe3JldHVybiBfMHgxMThkYmE8PV8weDNlM2VjMzt9LCdNSlNNUyc6XzB4MjQ4MzBkKDB4MTJlLCdkZSNHJyksJ2NIUnNKJzpmdW5jdGlvbihfMHg0MmZjMGYsXzB4MzdkMjAxKXtyZXR1cm4gXzB4NDJmYzBmPT09XzB4MzdkMjAxO30sJ2pkUlNaJzpfMHgyNDgzMGQoMHgxNGYsJ2F5dlEnKSwnZlVQQ3InOl8weDI0ODMwZCgweDEyMSwnKiNAMycpLCdYWXdjVCc6ZnVuY3Rpb24oXzB4MjlmNTFlLF8weGY3ODFlYSl7cmV0dXJuIF8weDI5ZjUxZSE9PV8weGY3ODFlYTt9LCdKQnNLaCc6XzB4MjQ4MzBkKDB4MTRlLCdANTFrJyksJ05VUUdZJzpfMHgyNDgzMGQoMHgxNjEsJ0ckRTQnKSwnVmR3UnQnOl8weDI0ODMwZCgweGZhLCcpcDYjJyl9O2xldCBfMHgzZTNjOWU9ISFbXTtyZXR1cm4gZnVuY3Rpb24oXzB4MWY2NTNmLF8weDQ0NzE4OSl7Y29uc3QgXzB4YjBiMzNmPV8weDI0ODMwZCxfMHgzOGM2ZWM9eydZYlNHSic6XzB4NDcwYzUzW18weGIwYjMzZigweDEzMCwndjBwUScpXSwndE5HSGgnOmZ1bmN0aW9uKF8weDU3NjIzMixfMHg1Yzk2ODYpe2NvbnN0IF8weDFiMTk4Mz1fMHhiMGIzM2Y7cmV0dXJuIF8weDQ3MGM1M1tfMHgxYjE5ODMoMHgxMzUsJ0FWKV4nKV0oXzB4NTc2MjMyLF8weDVjOTY4Nik7fSwnRklMaW8nOmZ1bmN0aW9uKF8weDNkNzg4MSxfMHgyNTE5NzMpe2NvbnN0IF8weDU0NjUwYT1fMHhiMGIzM2Y7cmV0dXJuIF8weDQ3MGM1M1tfMHg1NDY1MGEoMHgxNDgsJ2M4N2MnKV0oXzB4M2Q3ODgxLF8weDI1MTk3Myk7fSwnTUNzZ0EnOmZ1bmN0aW9uKF8weDM3ZTdiYyxfMHgxMjAxMjEpe2NvbnN0IF8weDUwOTdmMj1fMHhiMGIzM2Y7cmV0dXJuIF8weDQ3MGM1M1tfMHg1MDk3ZjIoMHgxMTAsJ3dtMmsnKV0oXzB4MzdlN2JjLF8weDEyMDEyMSk7fSwnZWd3Q00nOl8weDQ3MGM1M1tfMHhiMGIzM2YoMHgxMDYsJ2tMSlInKV0sJ21za2ZOJzpmdW5jdGlvbihfMHgxYzgyNWEsXzB4ZTgzNTQ5KXtjb25zdCBfMHg0YjQ5MzY9XzB4YjBiMzNmO3JldHVybiBfMHg0NzBjNTNbXzB4NGI0OTM2KDB4MTE3LCdIRFhoJyldKF8weDFjODI1YSxfMHhlODM1NDkpO30sJ2VLYXBmJzpfMHg0NzBjNTNbXzB4YjBiMzNmKDB4MTQwLCdaRzZPJyldLCdlTGtJRCc6XzB4NDcwYzUzW18weGIwYjMzZigweDEwMCwnYmFNYicpXSwnRW1MWXknOmZ1bmN0aW9uKF8weDFhZGY4NCxfMHgzMTliOGIpe2NvbnN0IF8weDI4NGJlZT1fMHhiMGIzM2Y7cmV0dXJuIF8weDQ3MGM1M1tfMHgyODRiZWUoMHgxMzMsJzVjKkgnKV0oXzB4MWFkZjg0LF8weDMxOWI4Yik7fSwnT0lhVkMnOl8weDQ3MGM1M1tfMHhiMGIzM2YoMHgxMjQsJ0s4dTYnKV19O2lmKF8weDQ3MGM1M1tfMHhiMGIzM2YoMHgxMjYsJ15JNVAnKV0oXzB4NDcwYzUzW18weGIwYjMzZigweDExMSwnUkNOZScpXSxfMHg0NzBjNTNbXzB4YjBiMzNmKDB4MTQ2LCdheXZRJyldKSlyZXR1cm4gXzB4MTgyZjIwW18weGIwYjMzZigweDExMiwnYXl2UScpXSgpW18weGIwYjMzZigweDEwZCwnYXl2UScpXShfMHgzOGM2ZWNbXzB4YjBiMzNmKDB4MTUyLCdOcnhZJyldKVtfMHhiMGIzM2YoMHgxNDUsJ0pbY1QnKV0oKVtfMHhiMGIzM2YoMHgxMzksJ01vOFonKV0oXzB4NTBmNjBkKVtfMHhiMGIzM2YoMHhmYywnTW84WicpXShfMHgzOGM2ZWNbXzB4YjBiMzNmKDB4MTJkLCcyZyhBJyldKTtlbHNle2NvbnN0IF8weDExNDA0OT1fMHgzZTNjOWU/ZnVuY3Rpb24oKXtjb25zdCBfMHhlNmRiMTY9XzB4YjBiMzNmLF8weDQ1MThhMT17J2ROYXZqJzpmdW5jdGlvbihfMHg0NDBiN2UsXzB4YmE1NzEyKXtjb25zdCBfMHgxMjVlZjY9XzB4NWE4YTtyZXR1cm4gXzB4MzhjNmVjW18weDEyNWVmNigweDExOSwnWkc2TycpXShfMHg0NDBiN2UsXzB4YmE1NzEyKTt9LCd5TGt6bic6ZnVuY3Rpb24oXzB4MzFlODk3LF8weDI1ZGIzMCl7Y29uc3QgXzB4NmI3NDkxPV8weDVhOGE7cmV0dXJuIF8weDM4YzZlY1tfMHg2Yjc0OTEoMHgxNWIsJ2RlI0cnKV0oXzB4MzFlODk3LF8weDI1ZGIzMCk7fSwnRFNxTEMnOmZ1bmN0aW9uKF8weDFkNTIyMixfMHgyZDM1NzYpe2NvbnN0IF8weDRmYmEzZT1fMHg1YThhO3JldHVybiBfMHgzOGM2ZWNbXzB4NGZiYTNlKDB4MTAyLCdkZSNHJyldKF8weDFkNTIyMixfMHgyZDM1NzYpO30sJ0FJVllDJzpfMHgzOGM2ZWNbXzB4ZTZkYjE2KDB4MTVhLCdheXZRJyldLCdzd2tlYyc6ZnVuY3Rpb24oXzB4MzA2MzU3LF8weDExYTZkNil7Y29uc3QgXzB4ZWQzYWU9XzB4ZTZkYjE2O3JldHVybiBfMHgzOGM2ZWNbXzB4ZWQzYWUoMHgxNTYsJ0ckRTQnKV0oXzB4MzA2MzU3LF8weDExYTZkNik7fX07aWYoXzB4MzhjNmVjW18weGU2ZGIxNigweGY5LCdBVileJyldKF8weDM4YzZlY1tfMHhlNmRiMTYoMHgxNTksJ04qVWYnKV0sXzB4MzhjNmVjW18weGU2ZGIxNigweDEyMCwnZGUjRycpXSkpe2NvbnN0IF8weDU0YWJkMj1fMHgyYzIxZGRbXzB4ZTZkYjE2KDB4MTIyLCdSN3JYJyldKF8weDUwMTA1OSxhcmd1bWVudHMpO3JldHVybiBfMHg1MDFmZWM9bnVsbCxfMHg1NGFiZDI7fWVsc2V7aWYoXzB4NDQ3MTg5KXtpZihfMHgzOGM2ZWNbXzB4ZTZkYjE2KDB4MTFjLCdjODdjJyldKF8weDM4YzZlY1tfMHhlNmRiMTYoMHgxMmEsJ2RlI0cnKV0sXzB4MzhjNmVjW18weGU2ZGIxNigweDEwYSwnMmcoQScpXSkpe2xldCBfMHgyZjhjYWM9JycsXzB4MjE4ODEzPV8weDQ1MThhMVtfMHhlNmRiMTYoMHgxMDgsJ0c2VSknKV0oXzB4MmQ4ODI1W18weGU2ZGIxNigweDE1OCwnRXlCWycpXSgpWzB4MWM3KjB4MSstMHgxYmE4KzB4MTllMioweDFdLF8weDIwMjU5MltfMHhlNmRiMTYoMHgxMmIsJ0pzd3knKV1bXzB4ZTZkYjE2KDB4MTA1LCdGZFVnJyldKCkpO18weDJmOGNhYz1fMHg1OTJkNmJbXzB4ZTZkYjE2KDB4MTE4LCcyZyhBJyldKF8weDIxODgxMyksXzB4MmY4Y2FjPV8weDQ1MThhMVtfMHhlNmRiMTYoMHgxNGEsJ2YwYzknKV0oXzB4NDY1YTIxLF8weDJmOGNhYyk7bGV0IF8weDMwOWVjNj1bXTtmb3IobGV0IF8weDMxZDkyMD0tMHgxN2I5KzB4ODU0KjB4MSstMHgxMiotMHhkYjtfMHg0NTE4YTFbXzB4ZTZkYjE2KDB4MTQ3LCdHJEU0JyldKF8weDMxZDkyMCxfMHgyZjhjYWMpO18weDMxZDkyMCsrKXtfMHgzMDllYzZbXzB4ZTZkYjE2KDB4MTRkLCdheXZRJyldKF8weDFlYzczNFtfMHhlNmRiMTYoMHgxMTYsJ21KJXknKV0oXzB4MzFkOTIwKSk7fV8weDE2OTdlZltfMHhlNmRiMTYoMHgxNWQsJ0hpWzMnKV09XzB4NDUxOGExW18weGU2ZGIxNigweDExZCwnRXlCWycpXTtsZXQgXzB4NTljNTgyPV8weDUwZTJkZFtfMHhlNmRiMTYoMHgxMzIsJ1JDTmUnKV0oKTtjb25zdCBfMHgzMTg4Mjc9e307XzB4MzE4ODI3W18weGU2ZGIxNigweDEzNiwnXkk1UCcpXT1fMHgzMDllYzYsXzB4MzE4ODI3W18weGU2ZGIxNigweDEzYiwnXkk1UCcpXT1fMHg1OWM1ODIsXzB4NDUxOGExW18weGU2ZGIxNigweDEzNCwnd20yaycpXShfMHhhNTNiNWUsXzB4MzE4ODI3KTt9ZWxzZXtjb25zdCBfMHgzYzdlNGY9XzB4NDQ3MTg5W18weGU2ZGIxNigweDE0YywnZjBjOScpXShfMHgxZjY1M2YsYXJndW1lbnRzKTtyZXR1cm4gXzB4NDQ3MTg5PW51bGwsXzB4M2M3ZTRmO319fX06ZnVuY3Rpb24oKXt9O3JldHVybiBfMHgzZTNjOWU9IVtdLF8weDExNDA0OTt9fTt9KCkpLF8weDJlMWFjMz1fMHg0YjM4MDYodGhpcyxmdW5jdGlvbigpe2NvbnN0IF8weDU2ZDZlMT1fMHg1YThhLF8weDNlNDIxYT17fTtfMHgzZTQyMWFbXzB4NTZkNmUxKDB4MTYyLCdyQlheJyldPV8weDU2ZDZlMSgweDE1NCwnKXA2IycpO2NvbnN0IF8weDI0NWNkYz1fMHgzZTQyMWE7cmV0dXJuIF8weDJlMWFjM1tfMHg1NmQ2ZTEoMHgxNTUsJ0V5QlsnKV0oKVtfMHg1NmQ2ZTEoMHgxMjgsJ0c2VSknKV0oXzB4MjQ1Y2RjW18weDU2ZDZlMSgweDEzYywnbUoleScpXSlbXzB4NTZkNmUxKDB4MTVlLCdOcnhZJyldKClbXzB4NTZkNmUxKDB4MTJmLCdOKlVmJyldKF8weDJlMWFjMylbXzB4NTZkNmUxKDB4MTNlLCdyQlheJyldKF8weDI0NWNkY1tfMHg1NmQ2ZTEoMHgxMmMsJ0c2VSknKV0pO30pO2Z1bmN0aW9uIF8weDVhOGEoXzB4MzQzNjYxLF8weDIxOTQ1MCl7Y29uc3QgXzB4Yjg1ZWZlPV8weDVhZWIoKTtyZXR1cm4gXzB4NWE4YT1mdW5jdGlvbihfMHgzMDgyODUsXzB4NDJlYWY1KXtfMHgzMDgyODU9XzB4MzA4Mjg1LSgtMHgxKi0weDE2ZjkrMHgyMTQqMHgyKy0weDhiOCoweDMpO2xldCBfMHg3YTI2ZjU9XzB4Yjg1ZWZlW18weDMwODI4NV07aWYoXzB4NWE4YVsnTm5xZGtBJ109PT11bmRlZmluZWQpe3ZhciBfMHg4ZGExYjg9ZnVuY3Rpb24oXzB4NWE0NzA4KXtjb25zdCBfMHhkNjcyNjA9J2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5Ky89JztsZXQgXzB4NWNkYmMwPScnLF8weDE4OTMxZj0nJyxfMHg1YTUxMWI9XzB4NWNkYmMwK18weDhkYTFiODtmb3IobGV0IF8weDE2NzI4NT0tMHgzMDgqLTB4MSstMHg5NWMrMHg2YyoweGYsXzB4MjFmOWRiLF8weDE0MTBlMCxfMHhhMTcyY2Y9LTB4NzkrLTB4Mzc1KjB4MysweGFkODtfMHgxNDEwZTA9XzB4NWE0NzA4WydjaGFyQXQnXShfMHhhMTcyY2YrKyk7fl8weDE0MTBlMCYmKF8weDIxZjlkYj1fMHgxNjcyODUlKC0weDU3KjB4MjcrMHgxMDk1Ky0weDM1MCk/XzB4MjFmOWRiKigtMHgzZDEqMHg1Ky0weDI2KjB4NysweDE0NWYpK18weDE0MTBlMDpfMHgxNDEwZTAsXzB4MTY3Mjg1KyslKDB4MTZmNCstMHgyZWMqMHg3Ky0weDI3YykpP18weDVjZGJjMCs9XzB4NWE1MTFiWydjaGFyQ29kZUF0J10oXzB4YTE3MmNmKygweDEqLTB4MTY1KzB4MjE5NysweDEyNiotMHgxYykpLSgweDFjNjkrMHgyMzMqLTB4MisweDE2OSotMHgxMSkhPT0weDQqLTB4MTNmKzB4YSotMHgxZWQrMHgxODNlP1N0cmluZ1snZnJvbUNoYXJDb2RlJ10oMHgzZDUqMHg5KzB4MjFhKy0weDIzOTgmXzB4MjFmOWRiPj4oLSgweDIxZmUrMHgxMjkyKy0weDc4MioweDcpKl8weDE2NzI4NSYweGQ0KjB4MSstMHhkZGIrMHhkMGQqMHgxKSk6XzB4MTY3Mjg1OjB4MjE4KzB4YjgzKjB4MSstMHhkOWIpe18weDE0MTBlMD1fMHhkNjcyNjBbJ2luZGV4T2YnXShfMHgxNDEwZTApO31mb3IobGV0IF8weDQ4NGFlNj0tMHg2NzgrMHgxMjRjKjB4MSstMHhiZDQsXzB4NTRlODI1PV8weDVjZGJjMFsnbGVuZ3RoJ107XzB4NDg0YWU2PF8weDU0ZTgyNTtfMHg0ODRhZTYrKyl7XzB4MTg5MzFmKz0nJScrKCcwMCcrXzB4NWNkYmMwWydjaGFyQ29kZUF0J10oXzB4NDg0YWU2KVsndG9TdHJpbmcnXSgweDFhNzYrMHg2KjB4NGZjKy0weDM4NGUqMHgxKSlbJ3NsaWNlJ10oLSgweDMqLTB4YmQ4KzB4MjY0MistMHgyYjgpKTt9cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChfMHgxODkzMWYpO307Y29uc3QgXzB4NDYxZTg4PWZ1bmN0aW9uKF8weDIwZWNjOSxfMHg3NzQ4YWEpe2xldCBfMHg0MjgwNzY9W10sXzB4MWJlZDQxPS0weDUqMHg1NWErMHgxZGE1KjB4MSsweDJlMyotMHgxLF8weDFkMGNhZixfMHhhOGRmNTU9Jyc7XzB4MjBlY2M5PV8weDhkYTFiOChfMHgyMGVjYzkpO2xldCBfMHg0NjE2ZDk7Zm9yKF8weDQ2MTZkOT0weDIyKi0weDU1KzB4MTBjKi0weDI1KzB4MzIwNjtfMHg0NjE2ZDk8MHg4YTMrLTB4MmYqMHhjZisweDFlNWU7XzB4NDYxNmQ5Kyspe18weDQyODA3NltfMHg0NjE2ZDldPV8weDQ2MTZkOTt9Zm9yKF8weDQ2MTZkOT0tMHgxKjB4MmIzKy0weDIqLTB4ZmZkKy0weDFkNDc7XzB4NDYxNmQ5PC0weDdmKi0weGQrMHhjOSotMHgyZisweDFmNzQ7XzB4NDYxNmQ5Kyspe18weDFiZWQ0MT0oXzB4MWJlZDQxK18weDQyODA3NltfMHg0NjE2ZDldK18weDc3NDhhYVsnY2hhckNvZGVBdCddKF8weDQ2MTZkOSVfMHg3NzQ4YWFbJ2xlbmd0aCddKSklKDB4MThkYSstMHgxMDMrLTB4MTZkNyksXzB4MWQwY2FmPV8weDQyODA3NltfMHg0NjE2ZDldLF8weDQyODA3NltfMHg0NjE2ZDldPV8weDQyODA3NltfMHgxYmVkNDFdLF8weDQyODA3NltfMHgxYmVkNDFdPV8weDFkMGNhZjt9XzB4NDYxNmQ5PS0weDk4KjB4MjArLTB4MSoweDFmMDkrMHgzMjA5LF8weDFiZWQ0MT0tMHg4NGYqMHg0Ky0weDgzYyoweDErMHgyKjB4MTRiYztmb3IobGV0IF8weGU0MmY5NT0tMHgzYTYqLTB4NCstMHg3NGIrLTB4NzRkO18weGU0MmY5NTxfMHgyMGVjYzlbJ2xlbmd0aCddO18weGU0MmY5NSsrKXtfMHg0NjE2ZDk9KF8weDQ2MTZkOSsoMHgxKjB4N2U3Ky0weGI2OSotMHgxKy0weDEzNGYpKSUoLTB4ZGNmKzB4MjZkNystMHgxODA4KSxfMHgxYmVkNDE9KF8weDFiZWQ0MStfMHg0MjgwNzZbXzB4NDYxNmQ5XSklKC0weDlkKi0weDMrLTB4MWEyMCstMHgxOTQ5Ki0weDEpLF8weDFkMGNhZj1fMHg0MjgwNzZbXzB4NDYxNmQ5XSxfMHg0MjgwNzZbXzB4NDYxNmQ5XT1fMHg0MjgwNzZbXzB4MWJlZDQxXSxfMHg0MjgwNzZbXzB4MWJlZDQxXT1fMHgxZDBjYWYsXzB4YThkZjU1Kz1TdHJpbmdbJ2Zyb21DaGFyQ29kZSddKF8weDIwZWNjOVsnY2hhckNvZGVBdCddKF8weGU0MmY5NSleXzB4NDI4MDc2WyhfMHg0MjgwNzZbXzB4NDYxNmQ5XStfMHg0MjgwNzZbXzB4MWJlZDQxXSklKDB4NmMzKi0weDErMHgxODQ5Ki0weDErMHgyKjB4MTAwNildKTt9cmV0dXJuIF8weGE4ZGY1NTt9O18weDVhOGFbJ2ZpZGdPbSddPV8weDQ2MWU4OCxfMHgzNDM2NjE9YXJndW1lbnRzLF8weDVhOGFbJ05ucWRrQSddPSEhW107fWNvbnN0IF8weGI4OThkOT1fMHhiODVlZmVbLTB4MjI2KzB4MTEzYistMHhmMTVdLF8weDI5M2NmOD1fMHgzMDgyODUrXzB4Yjg5OGQ5LF8weDMzNzVkMT1fMHgzNDM2NjFbXzB4MjkzY2Y4XTtpZighXzB4MzM3NWQxKXtpZihfMHg1YThhWydBbFFJbUonXT09PXVuZGVmaW5lZCl7Y29uc3QgXzB4N2IzNmY5PWZ1bmN0aW9uKF8weDQ1Mjk1ZSl7dGhpc1snbEpEakJlJ109XzB4NDUyOTVlLHRoaXNbJ3NLbkRISyddPVsweDEqMHgzODUrLTB4MyotMHgyZWYrMHgxKi0weGM1MSwweGZmOCsweDEqLTB4NjAyKzB4MWE5Ki0weDYsLTB4MjQ0YyotMHgxKy0weDExKi0weDNkKy0weDI4NTldLHRoaXNbJ2dDdUpsVCddPWZ1bmN0aW9uKCl7cmV0dXJuJ25ld1N0YXRlJzt9LHRoaXNbJ0xCbk1PSCddPSdceDVjdytceDIwKlx4NWMoXHg1YylceDIwKntceDVjdytceDIwKicsdGhpc1snQ2NxTlZrJ109J1tceDI3fFx4MjJdLitbXHgyN3xceDIyXTs/XHgyMCp9Jzt9O18weDdiMzZmOVsncHJvdG90eXBlJ11bJ3pmcUF3dyddPWZ1bmN0aW9uKCl7Y29uc3QgXzB4MTM1OGUxPW5ldyBSZWdFeHAodGhpc1snTEJuTU9IJ10rdGhpc1snQ2NxTlZrJ10pLF8weDNlZjdhND1fMHgxMzU4ZTFbJ3Rlc3QnXSh0aGlzWydnQ3VKbFQnXVsndG9TdHJpbmcnXSgpKT8tLXRoaXNbJ3NLbkRISyddWy0weDE3NTYrLTB4MjA0OCsweDM3OWZdOi0tdGhpc1snc0tuREhLJ11bLTB4MTlkYioweDErMHgxOWMqMHgxKzB4MTgzZl07cmV0dXJuIHRoaXNbJ25rdVNLdyddKF8weDNlZjdhNCk7fSxfMHg3YjM2ZjlbJ3Byb3RvdHlwZSddWydua3VTS3cnXT1mdW5jdGlvbihfMHgzNjg1ZjQpe2lmKCFCb29sZWFuKH5fMHgzNjg1ZjQpKXJldHVybiBfMHgzNjg1ZjQ7cmV0dXJuIHRoaXNbJ0hQbVpIcSddKHRoaXNbJ2xKRGpCZSddKTt9LF8weDdiMzZmOVsncHJvdG90eXBlJ11bJ0hQbVpIcSddPWZ1bmN0aW9uKF8weDE3YWIzZil7Zm9yKGxldCBfMHhlY2YxYWE9LTB4MTI5Ki0weDExKy0weGE1OCotMHgxKzB4MmIqLTB4YjMsXzB4MzcwYWEwPXRoaXNbJ3NLbkRISyddWydsZW5ndGgnXTtfMHhlY2YxYWE8XzB4MzcwYWEwO18weGVjZjFhYSsrKXt0aGlzWydzS25ESEsnXVsncHVzaCddKE1hdGhbJ3JvdW5kJ10oTWF0aFsncmFuZG9tJ10oKSkpLF8weDM3MGFhMD10aGlzWydzS25ESEsnXVsnbGVuZ3RoJ107fXJldHVybiBfMHgxN2FiM2YodGhpc1snc0tuREhLJ11bMHgxMTFhKy0weDFhZTErMHgxKjB4OWM3XSk7fSxuZXcgXzB4N2IzNmY5KF8weDVhOGEpWyd6ZnFBd3cnXSgpLF8weDVhOGFbJ0FsUUltSiddPSEhW107fV8weDdhMjZmNT1fMHg1YThhWydmaWRnT20nXShfMHg3YTI2ZjUsXzB4NDJlYWY1KSxfMHgzNDM2NjFbXzB4MjkzY2Y4XT1fMHg3YTI2ZjU7fWVsc2UgXzB4N2EyNmY1PV8weDMzNzVkMTtyZXR1cm4gXzB4N2EyNmY1O30sXzB4NWE4YShfMHgzNDM2NjEsXzB4MjE5NDUwKTt9XzB4MmUxYWMzKCksbmV3IFByb21pc2UoKF8weDRmMTdiNyxfMHg0ZGZmODcpPT57Y29uc3QgXzB4MzFhODRjPV8weDVhOGEsXzB4Mzc4NzM1PXsnc0FiWlgnOmZ1bmN0aW9uKF8weDE0NjlkOSxfMHg0NDg4M2Qpe3JldHVybiBfMHgxNDY5ZDkrXzB4NDQ4ODNkO30sJ3pEc3pLJzpmdW5jdGlvbihfMHg1YzlhOWMsXzB4M2FlYzMxKXtyZXR1cm4gXzB4NWM5YTljKF8weDNhZWMzMSk7fSwnZFN4Y2UnOmZ1bmN0aW9uKF8weDNmMjE0YixfMHgyOTAwNWEpe3JldHVybiBfMHgzZjIxNGI8PV8weDI5MDA1YTt9LCdOYlVjbyc6ZnVuY3Rpb24oXzB4MWYxN2VhLF8weDk1YjY5ZCl7cmV0dXJuIF8weDFmMTdlYT09PV8weDk1YjY5ZDt9LCdPVmRXeSc6XzB4MzFhODRjKDB4MTNmLCdheXZRJyksJ2ZRV1RwJzpfMHgzMWE4NGMoMHgxNWYsJ3dtMmsnKSwnUVFrWXgnOl8weDMxYTg0YygweDExYSwnKiNAMycpLCdlUFZaeCc6ZnVuY3Rpb24oXzB4MTI5MzdhLF8weDE4OGY4Yyl7cmV0dXJuIF8weDEyOTM3YShfMHgxODhmOGMpO319O2xldCBfMHgyNjY0NGM9JycsXzB4ZTY5N2FkPV8weDM3ODczNVtfMHgzMWE4NGMoMHgxMDEsJ3YwcFEnKV0oX19jYWRbXzB4MzFhODRjKDB4MTNkLCdmMGM5JyldKClbMHhlNTkrLTB4MTMqMHgxN2UrLTB4MiotMHg3MDFdLG1oX2luZm9bXzB4MzFhODRjKDB4MTA0LCdOcnhZJyldW18weDMxYTg0YygweDE1NSwnRXlCWycpXSgpKTtfMHgyNjY0NGM9JFtfMHgzMWE4NGMoMHgxMGYsJzIkVVEnKV0oXzB4ZTY5N2FkKSxfMHgyNjY0NGM9XzB4Mzc4NzM1W18weDMxYTg0YygweDEwOSwnOGpQbycpXShwYXJzZUludCxfMHgyNjY0NGMpO2xldCBfMHgzMmY5ZTI9W107Zm9yKGxldCBfMHgzYTJiNDE9LTB4MyoweDFiYistMHgxMGE0Ky0weDIqLTB4YWViO18weDM3ODczNVtfMHgzMWE4NGMoMHgxMjksJ2JhTWInKV0oXzB4M2EyYjQxLF8weDI2NjQ0Yyk7XzB4M2EyYjQxKyspe18weDM3ODczNVtfMHgzMWE4NGMoMHgxMDcsJ2M4N2MnKV0oXzB4Mzc4NzM1W18weDMxYTg0YygweDE0MSwnZ1RwXScpXSxfMHgzNzg3MzVbXzB4MzFhODRjKDB4MTUwLCcyJFVRJyldKT9fMHgzMjNkZjhbXzB4MzFhODRjKDB4MTQ5LCdGZFVnJyldKF8weDVhYjcwMVtfMHgzMWE4NGMoMHgxMzcsJ2R5bjEnKV0oXzB4MmE1Yjc4KSk6XzB4MzJmOWUyW18weDMxYTg0YygweDE0YiwnRXg3WCcpXShfX2NyW18weDMxYTg0YygweDE0MiwnRzZVKScpXShfMHgzYTJiNDEpKTt9X19jcltfMHgzMWE4NGMoMHgxMjUsJylwNiMnKV09XzB4Mzc4NzM1W18weDMxYTg0YygweDE0NCwnXkk1UCcpXTtsZXQgXzB4M2I2NzQwPV9fanNbXzB4MzFhODRjKDB4MTBiLCdKc3d5JyldKCk7Y29uc3QgXzB4MjI2M2ZiPXt9O18weDIyNjNmYltfMHgzMWE4NGMoMHgxNjAsJ3YwcFEnKV09XzB4MzJmOWUyLF8weDIyNjNmYltfMHgzMWE4NGMoMHgxNTMsJ0ZkVWcnKV09XzB4M2I2NzQwLF8weDM3ODczNVtfMHgzMWE4NGMoMHgxMzgsJ0ckRTQnKV0oXzB4NGYxN2I3LF8weDIyNjNmYik7fSk7') })();
        const uri = new URL(chapter.id, this.url);
        let request = new Request(uri, this.requestOptions);
        const data = await Engine.Request.fetchUI(request, script, 30000);
        return data.images.map(image => this.createConnectorURI( {
            url : new URL(image, this.url).href, key : data.key})
        );
    }

    async _handleConnectorURI(payload) {
        const request = new Request(payload.url, this.requestOptions);
        request.headers.set('x-referer', this.url);
        request.headers.set('x-origin', this.url);
        const response = await fetch(request);
        let buffer = '';
        if (payload.key.sigBytes != 0) {
            let encrypted = new Uint8Array(await response.arrayBuffer());
            buffer = {
                mimeType: response.headers.get('content-type'),
                data: await this._decryptPicture(encrypted, payload.key)
            };
        } else {
            buffer = await response.blob();
            buffer = await this._blobToBuffer(buffer);
        }
        this._applyRealMime(buffer);
        return buffer;
    }

    async _decryptPicture(data, key) {
        const G = key;
        const H = this.convertUint8ArrayToWordArray(new Uint8Array(data));
        const I = { 'ciphertext' : H};
        const options = {
            iv : CryptoJS.enc.Utf8.parse('0000000000000000'),
            mode : CryptoJS.mode.CBC,
            padding : CryptoJS.pad.Pkcs7
        };
        return this.convertWordArrayToUint8Array(CryptoJS.AES.decrypt(I, G, options));
    }

    convertWordArrayToUint8Array (wordArray) {
        var len = wordArray.words.length,
            u8_array = new Uint8Array(len << 2),
            offset = 0,
            word,
            i;
        for (i = 0; i < len; i++) {
            word = wordArray.words[i];
            u8_array[offset++] = word >> 24;
            u8_array[offset++] = word >> 16 & 255;
            u8_array[offset++] = word >> 8 & 255;
            u8_array[offset++] = word & 255;
        }
        return u8_array;
    }

    convertUint8ArrayToWordArray(u8Array) {
        var words = [],
            i = 0,
            len = u8Array.length;
        while (i < len) {
            words.push(u8Array[i++] << 24 | u8Array[i++] << 16 | u8Array[i++] << 8 | u8Array[i++]);
        }
        return {
            sigBytes: words.length * 4,
            words: words
        };
    }
}

export default MangaDig;
